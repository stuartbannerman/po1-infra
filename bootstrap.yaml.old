apiVersion: v1
kind: Service
metadata:
  annotations:
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP2 #This tells AWS to send traffic from the ALB using HTTP2. Can use GRPC as well if you want to leverage GRPC specific features
  labels:
    app: argogrpc
  name: argogrpc
  namespace: argocd
spec:
  ports:
  - name: "443"
    port: 443
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: argocd-server
  sessionAffinity: None
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTPS
    # Use this annotation (which must match a service name) to route traffic to HTTP2 backends.
    alb.ingress.kubernetes.io/conditions.argogrpc: |
      [{"field":"http-header","httpHeaderConfig":{"httpHeaderName": "Content-Type", "values":["application/grpc"]}}]
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
  name: argocd
  namespace: argocd
spec:
  rules:
  - host: argocd.argoproj.io
    http:
      paths:
      - path: /
        backend:
          service:
            name: argogrpc
            port:
              number: 443
        pathType: Prefix
      - path: /
        backend:
          service:
            name: argocd-server
            port:
              number: 443
        pathType: Prefix
  tls:
  - hosts:
    - argocd.argoproj.io
---
apiVersion: v1
kind: Secret
metadata:
    name: argocd-helm-registry
    namespace: argocd
    labels:
        argocd.argoproj.io/secret-type: repository
stringData:
    type: helm
    project: po1
    url: 236731556556.dkr.ecr.eu-west-1.amazonaws.com/
    password: password
    username: username
---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: po1
  namespace: argocd
spec:
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'
  destinations:
    - namespace: dev
      server: https://kubernetes.default.svc
    - name: '*'
      namespace: '*'
      server: https://kubernetes.default.svc
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'
  roles:
    - description: Project role to create and sync apps from a CI/CD pipeline
      name: github-create-sync
      policies:
        - p, proj:po1:github-create-sync, applications, get, po1/*, allow
        - p, proj:po1:github-create-sync, applications, create, po1/*, allow
        - p, proj:po1:github-create-sync, applications, update, po1/*, allow
        - p, proj:po1:github-create-sync, applications, delete, po1/*, allow
        - p, proj:po1:github-create-sync, applications, sync, po1/*, allow
  sourceRepos:
    - '*'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  # add an additional local user with apiKey and login capabilities
  accounts.gitlab: apiKey, login
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: boostrap
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: argocd
    server: https://kubernetes.default.svc
  project: default
  source:
    repoURL: https://github.com/stuartbannerman/po1-infra
    path: apps
    targetRevision: HEAD
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
